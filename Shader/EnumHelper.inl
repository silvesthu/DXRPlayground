// Generated by Gemini

#ifdef __cplusplus

#define enum_class_cpp enum class
#define ENABLE_UINT_ENUM_BITWISE_OPERATORS(EnumType)                            \
                                                                                \
/* 1. Bitwise OR (|) */                                                         \
inline EnumType operator|(EnumType lhs, EnumType rhs) { return (EnumType)((uint)lhs | (uint)rhs); } \
                                                                               \
/* 2. Bitwise AND (&) */                                                       \
inline EnumType operator&(EnumType lhs, EnumType rhs) { return (EnumType)((uint)lhs & (uint)rhs); } \
                                                                               \
/* 3. Bitwise XOR (^) */                                                       \
inline EnumType operator^(EnumType lhs, EnumType rhs) { return (EnumType)((uint)lhs ^ (uint)rhs); } \
                                                                               \
/* 4. Bitwise NOT (~) */                                                       \
inline EnumType operator~(EnumType val) { return (EnumType)(~(uint)val); } \
                                                                               \
/* 5. Compound OR assignment (|=) */                                           \
inline EnumType& operator|=(EnumType& lhs, EnumType rhs) { lhs = lhs | rhs; return lhs; } \
                                                                               \
/* 6. Compound AND assignment (&=) */                                          \
inline EnumType& operator&=(EnumType& lhs, EnumType rhs) { lhs = lhs & rhs; return lhs; } \
                                                                               \
/* 7. Compound XOR assignment (^=) */                                          \
inline EnumType& operator^=(EnumType& lhs, EnumType rhs) { lhs = lhs ^ rhs; return lhs; }

#else

#define enum_class_cpp enum
#define ENABLE_UINT_ENUM_BITWISE_OPERATORS(EnumType)

#endif // __cplusplus
